local Services = {
	Players = game:GetService("Players"),
	CoreGui = game:GetService("CoreGui"),
	RS = game:GetService("RunService"),
}

local LocalPlayer = Services.Players.LocalPlayer
local PlayerAdded = nil
local LocalCharacterAdded = nil
local LocalTeamChanged = nil

local Module = {
	Active = false,
	Settings = {
		ShowTeam = true,
	}
}

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
--// Miscellaneous Functions

function getRoot(char)
	local rootPart = char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso")
	return rootPart
end

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
--// HighlightHandler

local Folder = Instance.new("Folder",Services.CoreGui)
Folder.Name = "EspFolder"

local PlayerConnections = {}
local Nametags = {}
local Highlights = {}

function CreateNametag(player)
	local Billboard = Instance.new("BillboardGui")
	Billboard.AlwaysOnTop = true
	Billboard.Size = UDim2.new(0,300,0,30)
	Billboard.SizeOffset = Vector2.new(0,0.75)
	Billboard.StudsOffset = Vector3.new(0,1,0)
	Billboard.StudsOffsetWorldSpace = Vector3.new(0,1,0)
	Billboard.Parent = Folder
	
	local function Gradient()
		local Gradient = Instance.new("UIGradient")
		Gradient.Color = ColorSequence.new{
			ColorSequenceKeypoint.new(0.0,Color3.fromRGB(255,255,255)),
			ColorSequenceKeypoint.new(0.5,Color3.fromRGB(200,200,200)),
			ColorSequenceKeypoint.new(1.0,Color3.fromRGB(255,255,255)),
		}
		
		return Gradient
	end
	local function TextLabel(Name)
		local Label = Instance.new("TextLabel",Billboard)
		Label.Name = Name or "TextLabel"
		Label.BackgroundTransparency = 1
		Label.Font = Enum.Font.GothamMedium
		Label.TextColor3 = Color3.fromRGB(255,255,255)
		Label.TextScaled = true
		Label.Parent = Billboard
		
		local Stroke = Instance.new("UIStroke",Label)
		Stroke.Thickness = 1.5
		Stroke.Transparency = 0.75
		
		Gradient().Parent = Label
		Gradient().Parent = Stroke
		
		return Label
	end
	
	local Details = TextLabel("Details")
	Details.Size = UDim2.new(1,0,0.4,0)
	local Username = TextLabel("Username")
	Username.Position = UDim2.new(0,0,0.4,0)
	Username.Size = UDim2.new(1,0,0.6,0)
	
	if player then
		Billboard.Name = player.Name
		
		if player.Name == player.DisplayName then
			Username.Text = player.Name
		else
			Username.Text = player.DisplayName .. " (@" .. player.Name .. ")"
		end
	end
	
	return Billboard
end

function CreateHighlight(player)
	local Highlight = Instance.new("Highlight")
	Highlight.FillTransparency = 0.6
	Highlight.OutlineTransparency = 0.6
	Highlight.Parent = Folder
	
	if player then
		Highlight.Name = player.Name
	end
	
	return Highlight
end

function RefreshEsp(player)
	if not player.Character then return end
	if not Nametags[player.UserId] then Nametags[player.UserId] = CreateNametag(player)end
	Nametags[player.UserId].Username.UIStroke.Color = Module.Settings[player.Name] or player.TeamColor.Color
	Nametags[player.UserId].Details.UIStroke.Color = Module.Settings[player.Name] or player.TeamColor.Color
	Nametags[player.UserId].Adornee = player.Character:WaitForChild("Head")
	
	if not Highlights[player.UserId] then Highlights[player.UserId] = CreateHighlight()end
	Highlights[player.UserId].FillColor = Module.Settings[player.Name] or player.TeamColor.Color
	Highlights[player.UserId].OutlineColor = Module.Settings[player.Name] or player.TeamColor.Color
	Highlights[player.UserId].Adornee = player.Character
	
	if (player.Team == LocalPlayer.Team and player.Team ~= nil)then -- If Teammates, Set Accordingly.
		Nametags[player.UserId].Enabled = Module.Settings.ShowTeam
		Highlights[player.UserId].Enabled = Module.Settings.ShowTeam
	else -- Incase Disabled.
		Nametags[player.UserId].Enabled = true
		Highlights[player.UserId].Enabled = true
	end
end

function RemoveEsp(player)
	if Nametags[player.UserId]then
		Nametags[player.UserId]:Destroy()
		Nametags[player.UserId] = nil
	end
	if Highlights[player.UserId]then
		Highlights[player.UserId]:Destroy()
		Highlights[player.UserId] = nil
	end
	if PlayerConnections[player.UserId]then
		PlayerConnections[player.UserId].Loop:Disconnect()
		PlayerConnections[player.UserId].Team:Disconnect()
		PlayerConnections[player.UserId].Added:Disconnect()
		PlayerConnections[player.UserId] = nil
	end
end

function RefreshEspDetails(player)
	if not Services.Players:FindFirstChild(player.Name)then
		RemoveEsp(player) return
	end
	
	if player.Character and getRoot(player.Character) and player.Character:FindFirstChild("Humanoid") and LocalPlayer.Character and getRoot(LocalPlayer.Character)then
		local Humanoid = player.Character:FindFirstChild("Humanoid")
		local RootPart = player.Character:FindFirstChild("HumanoidRootPart")
		if not Humanoid or not RootPart then return end
		
		local Health = math.floor(Humanoid.Health * 100)/100
		local Distance = math.floor((getRoot(LocalPlayer.Character).Position - RootPart.Position).Magnitude)		
		Nametags[player.UserId].Details.Text = "HP: " .. Health .. " | " .. Distance .. " Studs"
	end
end

function RefreshAllEsp()
	for userid,_ in pairs(PlayerConnections)do
		local p = Services.Players:GetPlayerByUserId(userid)
		if p then RefreshEsp(p)end
	end
end

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
--// Main

function Module:Toggle(player,State)
	if PlayerConnections[player.UserId] and not State then -- Remove Esp
		RemoveEsp(player)
	elseif not PlayerConnections[player.UserId] and (State == true or State == nil)then -- Apply Esp
		if player == LocalPlayer then return end
		if not player.Character then player.CharacterAdded:Wait()end
		
		PlayerConnections[player.UserId] = {
			Loop = Services.RS.RenderStepped:Connect(function()
				RefreshEspDetails(player)
			end),
			Team = player:GetPropertyChangedSignal("Team"):Connect(function()
				RefreshEsp(player)
			end),
			Added = player.CharacterAdded:Connect(function(character)
				RefreshEsp(player)
			end),
		}
		
		RefreshEsp(player)
	end
end

function Module:Update(Settings)
	if Settings then
		for i,v in pairs(Settings)do
			Module.Settings[i] = v
		end
	end
	
	RefreshAllEsp()	
end

function Module:Clear()
	for i,_ in pairs(PlayerConnections)do
		local player = Services.Players:GetPlayerByUserId(i)
		if player then
			RemoveEsp(player)
		else
			PlayerConnections[i] = nil
		end
	end
	
	if PlayerAdded then
		PlayerAdded:Disconnect()
		PlayerAdded = nil
	end
	if LocalCharacterAdded then
		LocalCharacterAdded:Disconnect()
		LocalCharacterAdded = nil
	end
	if LocalTeamChanged then
		LocalTeamChanged:Disconnect()
		LocalTeamChanged = nil
	end
	
	Module.Active = false
end

function Module:Auto(Settings)
	if PlayerAdded or LocalCharacterAdded then
		return
	end
	
	if Settings then
		for i,v in pairs(Settings)do
			Module.Settings[i] = v
		end
	end
	
	for _,v in pairs(Services.Players:GetPlayers())do
		Module:Toggle(v)
	end
	PlayerAdded = Services.Players.PlayerAdded:Connect(function(player)
		Module:Toggle(player)
	end)
	LocalCharacterAdded = LocalPlayer.CharacterAdded:Connect(RefreshAllEsp)
	LocalTeamChanged = LocalPlayer:GetPropertyChangedSignal("Team"):Connect(RefreshAllEsp)
	Module.Active = true
end

return Module
