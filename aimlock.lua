local Services = {
	Players = game:GetService("Players"),
	StarterGui = game:GetService("StarterGui"),
	RS = game:GetService("RunService"),
	UIS = game:GetService("UserInputService"),
}

local LocalPlayer = Services.Players.LocalPlayer
local Camera = workspace.Camera
local Connections = {}

local Module = {
	Settings = {
		IgnoreTeam = true,
		Speed = 0.5,
		Keybinds = {
			Lock = Enum.KeyCode.X,

		},
	}
}

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
--// Misc Functions

function getRoot(char)
	local rootPart = char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso")
	return rootPart
end

function isTeammate(player)
	if (player.Team ~= nil and player.Team == LocalPlayer.Team)then
		return true
	end
end

function getfovxyz(p0,p1,deg) -- Don't know who made these two functions, but it pretty much tells the angle from the direction PointA is facing to PointB or something.
	local x1, y1, z1 = p0:ToOrientation()
	local cf = CFrame.new(p0.Position,p1.Position)
	local x2, y2, z2 = cf:ToOrientation()
	if deg then
		return Vector3.new(math.deg(x1-x2),math.deg(y1-y2),math.deg(z1-z2))
	else
		return Vector3.new((x1-x2),(y1-y2),(z1-z2))
	end
end
function checkfov(part)
	local fov = getfovxyz(Camera.CFrame,part.CFrame)
	local angle = math.abs(fov.X) + math.abs(fov.Y)
	return angle
end

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
--// Aim

local LockedOnto = nil
local LockedConnection = nil

local function LookAt()
	if LockedOnto then
		if Module.Settings.Speed <= 0 then
			Camera.CFrame = CFrame.new(Camera.CFrame.Position,LockedOnto.CFrame.Position)
		else
			Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position,LockedOnto.CFrame.Position),Module.Settings.Speed)
		end
	end	
end

local function LockOn()
	if LockedOnto then
		LockedOnto = nil
		if LockedConnection then
			LockedConnection:Disconnect()
			LockedConnection = nil
		end
	elseif not LockedOnto then
		local Furthest = math.rad(22.5) -- Must be closer than to LockOn.

		for _,player in pairs(Services.Players:GetPlayers())do
			if player ~= LocalPlayer and player.Character and getRoot(player.Character) and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
				if not (isTeammate(player) and Module.Settings.IgnoreTeam)then
					
					local Angle = checkfov(getRoot(player.Character))
					if Angle < Furthest then
						Furthest = Angle
						LockedOnto = getRoot(player.Character)
					end

					if LockedOnto then
						LockedConnection = player.Character.Humanoid.Died:Connect(function()
							if LockedOnto == getRoot(player.Character)then
								LockedOnto = nil
							end
						end)
					end
				end
			end
		end
	end
end



--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
--// Input

local function isKey(input,key)
	if input.KeyCode == Module.Settings.Keybinds[key] then
		return true
	end
end

local function InputHandler(input,gameProcessed)
	if gameProcessed then
		return
	end
	if isKey(input,"Lock")then
		LockOn()
	end
end

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
--// Stuff

function Module:Update(Settings)
	if Settings then
		for i,v in pairs(Settings)do
			Module.Settings[i] = v
		end
	end
end

function Module:Start(Settings)
	if Settings then
		for i,v in pairs(Settings)do
			Module.Settings[i] = v
		end
	end
	if not Connections.Input then
		Connections.Input = Services.UIS.InputBegan:Connect(InputHandler)
		Connections.LookAt = Services.RS.RenderStepped:Connect(LookAt)
	end
end

function Module:Stop()
	if Connections.Input then
		Connections.Input:Disconnect()
		Connections.Input = nil
		Connections.LookAt:Disconnect()
		Connections.LookAt = nil
	end
end

return Module
