-- functions using : do something, may return something
-- functions using . do nothing, always returns something
-- c is a Character Model
-- p is a Player Instance

local Utils = {}

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
-- // : Stuff

function Utils:InputBegan(KeyCode,Callback) -- Runs Callback when Key is pressed, Connection is Returned to be disabled later.
	local Connection = game:GetService("UserInputService").InputBegan:Connect(function(inputObject,gameProcessed)
		if not gameProcessed and inputObject.KeyCode == KeyCode then
			Callback()
		end
	end)
	return Connection
end

function Utils:Touch(Part,TargetPart,Toggle)
    Toggle = (Toggle == nil or Toggle == true) and 0 or Toggle == false and 1
    if TargetPart:IsA("TouchTransmitter") and TargetPart.Parent then
        TargetPart = TargetPart.Parent
    end
    
    firetouchinterest(Part,TargetPart,Toggle)
end
function Utils:TouchList(Part,List,Toggle) -- Attempts to touch List items with Part, Toggle is self explanatory, defaults to true.
    for _,v in pairs(List)do
        if v:IsA("TouchTransmitter") and v.Parent then
            Utils:Touch(Part,v.Parent,Toggle)
        end
    end
end

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--
-- // . Stuff

function Utils.GetCharacters(Include) -- Gets all Player Characters excluding yourself, if Include then you are Included in the list.  
	local List = {}
	for _,p in pairs(game:GetService("Players"):GetPlayers())do
		if not p.Character or (p == Utils.lPlayer() and not Include) then
			continue
		end
		
		table.insert(List,p.Character)
	end
	return List
end

function Utils.lPlayer() -- Gets Local Player
	return game:GetService("Players").LocalPlayer
end
function Utils.lCharacter() -- Gets Local Character
	return Utils.lPlayer().Character
end
function Utils.Root(c) -- RootPart from Character
	return c:FindFirstChild("HumanoidRootPart") or c:FindFirstChild("Torso") or c:FindFirstChild("UpperTorso") or c:FindFirstChildOfClass("BasePart")
end
function Utils.lRoot() -- Local Variant
	return Utils:GetRoot(Utils.lCharacter())
end
function Utils.cPos(c) -- Root Position from Character
	return Utils.Root(c).Position
end
function Utils.lHumanoid()
	return Utils.lCharacter():FindFirstChild("Humanoid")
end
function Utils.lPos() -- Local Variant
	return Utils:GetRoot(Utils.lCharacter()).Position
end

function Utils.Magnitude(P1,P2) -- distance for between two Vector3 values
	return (P1 - P2).Magnitude
end

function Utils.Services() -- for personal use
	return{
		Players = game:GetService("Players"),
		Lighting = game:GetService("Lighting"),
		RepStorage = game:GetService("ReplicatedStorage"),
		TS = game:GetService("TweenService"),
		RS = game:GetService("RunService"),
		UIS = game:GetService("UserInputService"),
		CAS = game:GetService("ContextActionService"),
	}
end

return Utils
